package it.gftblues.sixdofarm.ui;

/**
 * Copyright 2020 Gabriele Tafuro
 * 
 * This file is part of Pierin-oh!.
 *
 * Pierin-oh! is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 *  Pierin-oh! is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import java.util.Set;
import javax.swing.AbstractListModel;
import it.gftblues.sixdofarm.SixDOFArmControllerInterface;

/**
 * Game controller tab of the {@code SixDOFArmControllerGUI}.
 * 
 * @author Gabriele Tafuro
 *
 * @since 1.0
 */
public class SixDOFArmGameControllerTab extends javax.swing.JPanel {

  final private SixDOFArmControllerInterface armController;

  private AbstractListModel<String> gameControllers;

  private boolean enableGamePads;

  /**
   * Creates new form SixDOFArmControllerTab
   * @param ac
   *        The reference to the object that implements a 
   *        {@code SixDOFArmControllerInterface} interface.
   */
  public SixDOFArmGameControllerTab(SixDOFArmControllerInterface ac) {
    armController = ac;
    preInitializing();
    initComponents();
    postInitializing();
  }

  private void preInitializing() {
    enableGamePads = armController.areGameControlelrsEnabled();
    setGameControllerTab();
  }

  private void postInitializing() {
    setGameControllerTab();
    controllers.setEnabled(false);
  }

  private void setGameControllerTab() {
    gameControllers = getGameControllersList();
    boolean enable = gameControllers.getSize() > 0;
    if (controllers != null) {
      controllers.setModel(gameControllers);
      controllers.setEnabled(false);
    }
    if (enableControllersCheckBox != null) {
      enableControllersCheckBox.setSelected(enableGamePads);
//      enableControllersCheckBox.setEnabled(enable);
    }
  }

  private AbstractListModel<String> getGameControllersList() {
    Set<String> ctrls = armController.getGameControllerNames();
    if (ctrls != null && !ctrls.isEmpty()) {
      return new javax.swing.AbstractListModel<String>() {
        String[] strings = ctrls.toArray(new String[0]);
        @Override
        public int getSize() {
          return strings.length;
        }
        @Override
        public String getElementAt(int i) {
          return strings[i];
        }
      };
    } else {
      return new javax.swing.AbstractListModel<String>() {
        String[] strings = {};
        @Override
        public int getSize() {
          return strings.length; 
        }
        @Override
        public String getElementAt(int i) {
          return strings[i];
        }
      };
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    innerPanel = new javax.swing.JPanel();
    enableControllersCheckBox = new javax.swing.JCheckBox();
    checkForControllersBtn = new javax.swing.JButton();
    controllersLabel = new javax.swing.JLabel();
    controllersScroller = new javax.swing.JScrollPane();
    controllers = new javax.swing.JList<>();

    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("it/gftblues/sixdofarm/SixDOFArm"); // NOI18N
    enableControllersCheckBox.setText(bundle.getString("TAB_GAME_CONTROLLERS_ENABLE")); // NOI18N
    enableControllersCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        enableControllersCheckBoxActionPerformed(evt);
      }
    });

    checkForControllersBtn.setText(bundle.getString("TAB_GAME_CONTROLLERS_CHECK")); // NOI18N
    checkForControllersBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        checkForControllersBtnActionPerformed(evt);
      }
    });

    controllersLabel.setText(bundle.getString("TAB_GAME_CONTROLLERS_AVAILABLE")); // NOI18N

    controllers.setModel(gameControllers);
    controllersScroller.setViewportView(controllers);

    javax.swing.GroupLayout innerPanelLayout = new javax.swing.GroupLayout(innerPanel);
    innerPanel.setLayout(innerPanelLayout);
    innerPanelLayout.setHorizontalGroup(
      innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(innerPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(innerPanelLayout.createSequentialGroup()
            .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(controllersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(controllersScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addComponent(checkForControllersBtn))
          .addGroup(innerPanelLayout.createSequentialGroup()
            .addComponent(enableControllersCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    innerPanelLayout.setVerticalGroup(
      innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(innerPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(controllersLabel)
          .addComponent(checkForControllersBtn))
        .addGap(4, 4, 4)
        .addComponent(controllersScroller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(enableControllersCheckBox)
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(innerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(innerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(73, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void enableControllersCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableControllersCheckBoxActionPerformed
    enableGamePads = this.enableControllersCheckBox.isSelected();
    armController.enableGameControllers(
      gameControllers.getSize() > 0 &&
      enableGamePads
    );
  }//GEN-LAST:event_enableControllersCheckBoxActionPerformed

  private void checkForControllersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkForControllersBtnActionPerformed
    armController.searchForGameControllers();
    setGameControllerTab();
  }//GEN-LAST:event_checkForControllersBtnActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton checkForControllersBtn;
  private javax.swing.JList<String> controllers;
  private javax.swing.JLabel controllersLabel;
  private javax.swing.JScrollPane controllersScroller;
  private javax.swing.JCheckBox enableControllersCheckBox;
  private javax.swing.JPanel innerPanel;
  // End of variables declaration//GEN-END:variables

  public boolean isGameControllerEnabled() {
    return enableControllersCheckBox.isSelected();
  }

  public void setGameCOntrollerEnabled(boolean enable) {
    enableControllersCheckBox.setSelected(enable);
  }
}
