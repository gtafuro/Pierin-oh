package it.gftblues.sixdofarm.ui;

/**
 * Copyright 2020 Gabriele Tafuro
 * 
 * This file is part of Pierin-oh!.
 *
 * Pierin-oh! is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 *  Pierin-oh! is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import it.gftblues.sixdofarm.controllers.SerialCommunicator;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import it.gftblues.sixdofarm.SixDOFArmControllerInterface;
import it.gftblues.utils.FileUtils;
import java.io.File;
import java.text.NumberFormat;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Serial port tab of the {@code SixDOFArmControllerGUI}.
 * 
 * @author Gabriele Tafuro
 *
 * @since 1.0
 */
public class SixDOFArmSerialTab extends javax.swing.JPanel {

  private final String noAvailablePort;

  final private SixDOFArmControllerGUI gui;
  final private SixDOFArmControllerInterface armController;

  private ComboBoxModel<String> portNameModel;
  private ComboBoxModel<String> datarateModel;
  private ComboBoxModel<String> dataBitsModel;
  private ComboBoxModel<String> parityComboModel;
  private ComboBoxModel<String> stopBitModel;

  /**
   * Creates new form SixDOFArmSerialPanel
   * @param gui
   *        A reference to the {@code SixDOFArmControllerGUI} for sending 
   *        notifications (for instance informing the parent that the serial 
   *        port has been connected).
   * @param ac
   *        The reference to the object that implements a 
   *        {@code SixDOFArmControllerInterface} interface.
   */
  public SixDOFArmSerialTab(
          SixDOFArmControllerGUI gui,
          SixDOFArmControllerInterface ac
  ) {
    this.gui = gui;
    armController = ac;
    noAvailablePort = ac.getNoPortAvailableString();
  }

  public void activate() {
    preInitializing();
    initComponents();
    postInitializing();
  }

  private void preInitializing() {
    
  }

  private void postInitializing() {
    setPortNameComboboxEnable();
    comPortName.setSelectedIndex(0);
/*    PlainDocument doc = (PlainDocument)comTimeout.getDocument();
    doc.setDocumentFilter(new IntegerDocFilter());*/
  }
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    innerPanel = new javax.swing.JPanel();
    portNamePanel = new javax.swing.JPanel();
    comPortNameLabel = new javax.swing.JLabel();
    comPortName = new javax.swing.JComboBox<>();
    refreshBtn = new javax.swing.JButton();
    dataRatePanel = new javax.swing.JPanel();
    comDataRateLabel = new javax.swing.JLabel();
    comDataRate = new javax.swing.JComboBox<>();
    dataBitsPanel = new javax.swing.JPanel();
    comDataBitLabel = new javax.swing.JLabel();
    comDataBit = new javax.swing.JComboBox<>();
    parityPanel = new javax.swing.JPanel();
    comParityLabel = new javax.swing.JLabel();
    comParity = new javax.swing.JComboBox<>();
    stopbitPanel = new javax.swing.JPanel();
    comStopBitLabel = new javax.swing.JLabel();
    comStopBit = new javax.swing.JComboBox<>();
    timeoutPanel = new javax.swing.JPanel();
    comTimeoutLabel = new javax.swing.JLabel();
    comTimeout = new javax.swing.JFormattedTextField();
    timeBetweenCommandsMSLabel = new javax.swing.JLabel();
    connectBtn = new javax.swing.JButton();
    disconnectBtn = new javax.swing.JButton();
    timeBetweenCommandsPanel = new javax.swing.JPanel();
    timeBetweenCommandsLabel = new javax.swing.JLabel();
    timeBetweenCommands = new javax.swing.JFormattedTextField(NumberFormat.getInstance());
    timeBetweenCommandsMU = new javax.swing.JLabel();
    logFilePanel = new javax.swing.JPanel();
    logFileBtn = new javax.swing.JButton();
    logFile = new javax.swing.JTextField();
    logFileLabel = new javax.swing.JLabel();

    innerPanel.setMaximumSize(new java.awt.Dimension(404, 380));
    innerPanel.setMinimumSize(new java.awt.Dimension(404, 380));

    portNamePanel.setMaximumSize(new java.awt.Dimension(260, 42));
    portNamePanel.setMinimumSize(new java.awt.Dimension(260, 42));
    portNamePanel.setPreferredSize(new java.awt.Dimension(260, 42));
    portNamePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    comPortNameLabel.setLabelFor(comPortName);
    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("it/gftblues/sixdofarm/SixDOFArm"); // NOI18N
    comPortNameLabel.setText(bundle.getString("TAB_SERIAL_PORT_NAME")); // NOI18N
    comPortNameLabel.setMaximumSize(new java.awt.Dimension(204, 14));
    comPortNameLabel.setMinimumSize(new java.awt.Dimension(204, 14));
    comPortNameLabel.setPreferredSize(new java.awt.Dimension(204, 14));
    portNamePanel.add(comPortNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

    comPortName.setModel(portNameModel);
    comPortName.setMaximumSize(new java.awt.Dimension(200, 22));
    comPortName.setMinimumSize(new java.awt.Dimension(200, 22));
    comPortName.setPreferredSize(new java.awt.Dimension(200, 22));
    portNamePanel.add(comPortName, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, -1, -1));

    refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/gftblues/sixdofarm/refresh.png"))); // NOI18N
    refreshBtn.setMaximumSize(new java.awt.Dimension(40, 40));
    refreshBtn.setMinimumSize(new java.awt.Dimension(40, 40));
    refreshBtn.setPreferredSize(new java.awt.Dimension(40, 40));
    refreshBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        refreshBtnActionPerformed(evt);
      }
    });
    portNamePanel.add(refreshBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, -1, -1));

    dataRatePanel.setMaximumSize(new java.awt.Dimension(200, 42));
    dataRatePanel.setMinimumSize(new java.awt.Dimension(200, 42));
    dataRatePanel.setPreferredSize(new java.awt.Dimension(200, 42));
    dataRatePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    comDataRateLabel.setLabelFor(comDataRate);
    comDataRateLabel.setText(bundle.getString("TAB_SERIAL_DATA_RATE")); // NOI18N
    comDataRateLabel.setMaximumSize(new java.awt.Dimension(204, 14));
    comDataRateLabel.setMinimumSize(new java.awt.Dimension(204, 14));
    comDataRateLabel.setName(""); // NOI18N
    comDataRateLabel.setPreferredSize(new java.awt.Dimension(204, 14));
    dataRatePanel.add(comDataRateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

    comDataRate.setModel(datarateModel);
    comDataRate.setMaximumSize(new java.awt.Dimension(200, 22));
    comDataRate.setMinimumSize(new java.awt.Dimension(200, 22));
    comDataRate.setPreferredSize(new java.awt.Dimension(200, 22));
    dataRatePanel.add(comDataRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, -1, -1));

    dataBitsPanel.setMaximumSize(new java.awt.Dimension(200, 42));
    dataBitsPanel.setMinimumSize(new java.awt.Dimension(200, 42));
    dataBitsPanel.setPreferredSize(new java.awt.Dimension(200, 42));
    dataBitsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    comDataBitLabel.setLabelFor(comDataBit);
    comDataBitLabel.setText(bundle.getString("TAB_SERIAL_DATA_BITS")); // NOI18N
    comDataBitLabel.setMaximumSize(new java.awt.Dimension(204, 14));
    comDataBitLabel.setMinimumSize(new java.awt.Dimension(204, 14));
    comDataBitLabel.setPreferredSize(new java.awt.Dimension(204, 14));
    dataBitsPanel.add(comDataBitLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

    comDataBit.setModel(dataBitsModel);
    comDataBit.setMaximumSize(new java.awt.Dimension(200, 22));
    comDataBit.setMinimumSize(new java.awt.Dimension(200, 22));
    comDataBit.setPreferredSize(new java.awt.Dimension(200, 22));
    dataBitsPanel.add(comDataBit, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, -1, -1));

    parityPanel.setMaximumSize(new java.awt.Dimension(200, 42));
    parityPanel.setMinimumSize(new java.awt.Dimension(200, 42));
    parityPanel.setPreferredSize(new java.awt.Dimension(200, 42));
    parityPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    comParityLabel.setLabelFor(comParity);
    comParityLabel.setText(bundle.getString("TAB_SERIAL_DATA_PARITY")); // NOI18N
    comParityLabel.setMaximumSize(new java.awt.Dimension(204, 14));
    comParityLabel.setMinimumSize(new java.awt.Dimension(204, 14));
    comParityLabel.setPreferredSize(new java.awt.Dimension(204, 14));
    parityPanel.add(comParityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

    comParity.setModel(parityComboModel);
    comParity.setMaximumSize(new java.awt.Dimension(200, 22));
    comParity.setMinimumSize(new java.awt.Dimension(200, 22));
    comParity.setName(""); // NOI18N
    comParity.setPreferredSize(new java.awt.Dimension(200, 22));
    parityPanel.add(comParity, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, -1, -1));

    stopbitPanel.setMaximumSize(new java.awt.Dimension(200, 42));
    stopbitPanel.setMinimumSize(new java.awt.Dimension(200, 42));
    stopbitPanel.setPreferredSize(new java.awt.Dimension(200, 42));
    stopbitPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    comStopBitLabel.setLabelFor(comStopBit);
    comStopBitLabel.setText(bundle.getString("TAB_SERIAL_STOP_BIT")); // NOI18N
    comStopBitLabel.setMaximumSize(new java.awt.Dimension(204, 14));
    comStopBitLabel.setMinimumSize(new java.awt.Dimension(204, 14));
    comStopBitLabel.setPreferredSize(new java.awt.Dimension(204, 14));
    stopbitPanel.add(comStopBitLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

    comStopBit.setModel(stopBitModel);
    comStopBit.setMaximumSize(new java.awt.Dimension(200, 22));
    comStopBit.setMinimumSize(new java.awt.Dimension(200, 22));
    comStopBit.setPreferredSize(new java.awt.Dimension(200, 22));
    stopbitPanel.add(comStopBit, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, -1, -1));

    timeoutPanel.setMaximumSize(new java.awt.Dimension(200, 40));
    timeoutPanel.setMinimumSize(new java.awt.Dimension(200, 40));
    timeoutPanel.setPreferredSize(new java.awt.Dimension(200, 40));

    comTimeoutLabel.setLabelFor(comTimeout);
    comTimeoutLabel.setText(bundle.getString("TAB_SERIAL_TIMEOUT")); // NOI18N
    comTimeoutLabel.setToolTipText(bundle.getString("TAB_SERIAL_TIME_BETWEEN_COMMANDS_DEFINITION")); // NOI18N
    comTimeoutLabel.setMaximumSize(new java.awt.Dimension(204, 14));
    comTimeoutLabel.setMinimumSize(new java.awt.Dimension(204, 14));
    comTimeoutLabel.setPreferredSize(new java.awt.Dimension(204, 14));

    comTimeout.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
    comTimeout.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
    comTimeout.setMaximumSize(new java.awt.Dimension(75, 20));
    comTimeout.setMinimumSize(new java.awt.Dimension(75, 20));
    comTimeout.setPreferredSize(new java.awt.Dimension(75, 20));

    timeBetweenCommandsMSLabel.setText(bundle.getString("TAB_SERIAL_MILLISECONDS")); // NOI18N

    javax.swing.GroupLayout timeoutPanelLayout = new javax.swing.GroupLayout(timeoutPanel);
    timeoutPanel.setLayout(timeoutPanelLayout);
    timeoutPanelLayout.setHorizontalGroup(
      timeoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(timeoutPanelLayout.createSequentialGroup()
        .addComponent(comTimeoutLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, Short.MAX_VALUE))
      .addGroup(timeoutPanelLayout.createSequentialGroup()
        .addComponent(comTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(timeBetweenCommandsMSLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    timeoutPanelLayout.setVerticalGroup(
      timeoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(timeoutPanelLayout.createSequentialGroup()
        .addComponent(comTimeoutLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(6, 6, 6)
        .addGroup(timeoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(comTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(timeBetweenCommandsMSLabel)))
    );

    connectBtn.setText(bundle.getString("TAB_SERIAL_CONNECT")); // NOI18N
    connectBtn.setMaximumSize(new java.awt.Dimension(104, 23));
    connectBtn.setMinimumSize(new java.awt.Dimension(104, 23));
    connectBtn.setPreferredSize(new java.awt.Dimension(104, 23));
    connectBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        connectBtnActionPerformed(evt);
      }
    });

    disconnectBtn.setText(bundle.getString("TAB_SERIAL_DISCONNECT")); // NOI18N
    disconnectBtn.setMaximumSize(new java.awt.Dimension(104, 23));
    disconnectBtn.setMinimumSize(new java.awt.Dimension(104, 23));
    disconnectBtn.setPreferredSize(new java.awt.Dimension(104, 23));
    disconnectBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        disconnectBtnActionPerformed(evt);
      }
    });

    timeBetweenCommandsLabel.setLabelFor(timeBetweenCommands);
    timeBetweenCommandsLabel.setText(bundle.getString("TAB_SERIAL_TIME_BETWEEN_COMMANDS")); // NOI18N
    timeBetweenCommandsLabel.setToolTipText(bundle.getString("TAB_SERIAL_TIME_BETWEEN_COMMANDS_DEFINITION")); // NOI18N

    timeBetweenCommands.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
    timeBetweenCommands.setMaximumSize(new java.awt.Dimension(75, 20));
    timeBetweenCommands.setMinimumSize(new java.awt.Dimension(75, 20));
    timeBetweenCommands.setPreferredSize(new java.awt.Dimension(75, 20));
    timeBetweenCommands.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        timeBetweenCommandsActionPerformed(evt);
      }
    });

    timeBetweenCommandsMU.setText(bundle.getString("TAB_SERIAL_MILLISECONDS")); // NOI18N

    javax.swing.GroupLayout timeBetweenCommandsPanelLayout = new javax.swing.GroupLayout(timeBetweenCommandsPanel);
    timeBetweenCommandsPanel.setLayout(timeBetweenCommandsPanelLayout);
    timeBetweenCommandsPanelLayout.setHorizontalGroup(
      timeBetweenCommandsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(timeBetweenCommandsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(timeBetweenCommandsPanelLayout.createSequentialGroup()
        .addComponent(timeBetweenCommands, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(timeBetweenCommandsMU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    timeBetweenCommandsPanelLayout.setVerticalGroup(
      timeBetweenCommandsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(timeBetweenCommandsPanelLayout.createSequentialGroup()
        .addComponent(timeBetweenCommandsLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(timeBetweenCommandsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(timeBetweenCommands, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(timeBetweenCommandsMU))
        .addContainerGap())
    );

    logFileBtn.setText(bundle.getString("COMMON_BROWSE")); // NOI18N
    logFileBtn.setMaximumSize(new java.awt.Dimension(104, 23));
    logFileBtn.setMinimumSize(new java.awt.Dimension(104, 23));
    logFileBtn.setPreferredSize(new java.awt.Dimension(104, 23));
    logFileBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        logFileBtnActionPerformed(evt);
      }
    });

    logFile.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        logFileActionPerformed(evt);
      }
    });

    logFileLabel.setLabelFor(logFile);
    logFileLabel.setText(bundle.getString("TAB_SERIAL_LOG_FILE")); // NOI18N

    javax.swing.GroupLayout logFilePanelLayout = new javax.swing.GroupLayout(logFilePanel);
    logFilePanel.setLayout(logFilePanelLayout);
    logFilePanelLayout.setHorizontalGroup(
      logFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(logFilePanelLayout.createSequentialGroup()
        .addComponent(logFile)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(logFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
      .addComponent(logFileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    logFilePanelLayout.setVerticalGroup(
      logFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(logFilePanelLayout.createSequentialGroup()
        .addComponent(logFileLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(logFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(logFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(logFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    javax.swing.GroupLayout innerPanelLayout = new javax.swing.GroupLayout(innerPanel);
    innerPanel.setLayout(innerPanelLayout);
    innerPanelLayout.setHorizontalGroup(
      innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(innerPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
            .addGroup(innerPanelLayout.createSequentialGroup()
              .addComponent(portNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addGap(10, 10, 10)
              .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(connectBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(disconnectBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(dataRatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(logFilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addGroup(innerPanelLayout.createSequentialGroup()
            .addComponent(dataBitsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(70, 70, 70)
            .addComponent(stopbitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(innerPanelLayout.createSequentialGroup()
            .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(timeBetweenCommandsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(parityPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))
            .addGap(70, 70, 70)
            .addComponent(timeoutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    innerPanelLayout.setVerticalGroup(
      innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(innerPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(portNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(innerPanelLayout.createSequentialGroup()
            .addComponent(connectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(7, 7, 7)
            .addComponent(disconnectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addGap(7, 7, 7)
        .addComponent(dataRatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(innerPanelLayout.createSequentialGroup()
            .addGroup(innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(dataBitsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(stopbitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addComponent(parityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(timeoutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addComponent(timeBetweenCommandsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(logFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(28, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(innerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(innerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
  }// </editor-fold>//GEN-END:initComponents

  private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
    portNameModel = new DefaultComboBoxModel<>(armController.getSerialPortNames());
    comPortName.setModel(portNameModel);
    String portN = armController.getSerialPortName();
    if (portN != null) {
      comPortName.setSelectedItem(portN);
    }
    setPortNameComboboxEnable();
  }//GEN-LAST:event_refreshBtnActionPerformed

  private void connectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBtnActionPerformed
    armController.connectArm();
    if (armController.isArmConnected()) {
      gui.enablePad();
    }
  }//GEN-LAST:event_connectBtnActionPerformed

  private void disconnectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectBtnActionPerformed
    if (armController.isArmConnected()) {
      armController.disconnectArm();
      gui.enablePad(false);
    }
  }//GEN-LAST:event_disconnectBtnActionPerformed

  private void logFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logFileBtnActionPerformed
    FileNameExtensionFilter filter = new FileNameExtensionFilter(
      SixDOFArmResources.getString("LOG_FILE_DESCRIPTION"),
      SixDOFArmResources.getString("LOG_FILE_EXTENSION")
    );
    File file;
    File dir;
    final JFileChooser fc = new JFileChooser();
    fc.setDialogTitle(SixDOFArmResources.getString("LOG_FILE_SELECTION"));
    fc.setFileFilter(filter);

    String filename = logFile.getText();
    if (filename != null) {
      dir = new File(FileUtils.expandFileName(filename));
      if (dir.exists()) {
        fc.setCurrentDirectory(dir);
      }
    }
    int returnVal = fc.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      file = fc.getSelectedFile();
      logFile.setText(file.getAbsolutePath());
      armController.setClassifierFilePath(file.getAbsolutePath());
    }
  }//GEN-LAST:event_logFileBtnActionPerformed

  private void logFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logFileActionPerformed
    armController.setLogFilePathname(this.logFile.getText());
  }//GEN-LAST:event_logFileActionPerformed

  private void timeBetweenCommandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeBetweenCommandsActionPerformed
    String value = timeBetweenCommands.getText();
    armController.setTimeBetweenCommands(Integer.parseInt(value));
  }//GEN-LAST:event_timeBetweenCommandsActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox<String> comDataBit;
  private javax.swing.JLabel comDataBitLabel;
  private javax.swing.JComboBox<String> comDataRate;
  private javax.swing.JLabel comDataRateLabel;
  private javax.swing.JComboBox<String> comParity;
  private javax.swing.JLabel comParityLabel;
  private javax.swing.JComboBox<String> comPortName;
  private javax.swing.JLabel comPortNameLabel;
  private javax.swing.JComboBox<String> comStopBit;
  private javax.swing.JLabel comStopBitLabel;
  private javax.swing.JFormattedTextField comTimeout;
  private javax.swing.JLabel comTimeoutLabel;
  private javax.swing.JButton connectBtn;
  private javax.swing.JPanel dataBitsPanel;
  private javax.swing.JPanel dataRatePanel;
  private javax.swing.JButton disconnectBtn;
  private javax.swing.JPanel innerPanel;
  private javax.swing.JTextField logFile;
  private javax.swing.JButton logFileBtn;
  private javax.swing.JLabel logFileLabel;
  private javax.swing.JPanel logFilePanel;
  private javax.swing.JPanel parityPanel;
  private javax.swing.JPanel portNamePanel;
  private javax.swing.JButton refreshBtn;
  private javax.swing.JPanel stopbitPanel;
  private javax.swing.JFormattedTextField timeBetweenCommands;
  private javax.swing.JLabel timeBetweenCommandsLabel;
  private javax.swing.JLabel timeBetweenCommandsMSLabel;
  private javax.swing.JLabel timeBetweenCommandsMU;
  private javax.swing.JPanel timeBetweenCommandsPanel;
  private javax.swing.JPanel timeoutPanel;
  // End of variables declaration//GEN-END:variables

  /**
   * Enable/disable the combo box with the list of available ports.
   */
  private void setPortNameComboboxEnable() {
    if (portNameModel.getSize() >= 1) {
      comPortName.setEnabled(!(portNameModel.getElementAt(0).compareTo(noAvailablePort) == 0));
    }
  }

  public void setSerialPortNames(String[] names) {
    portNameModel = new DefaultComboBoxModel<>(names);
  }

  public void setSerialDataRates(String[] names) {
    datarateModel = new DefaultComboBoxModel<>(names);
  }

  public void setSerialDataBits(String[] names) {
    dataBitsModel = new DefaultComboBoxModel<>(names);
  }

  public void setSerialParities(String[] names) {
    parityComboModel = new DefaultComboBoxModel<>(names);
  }

  public void setSerialStopBits(String[] names) {
      stopBitModel = new DefaultComboBoxModel<>(names);
  }

  public String getSerialPortName() {
    Object[] values = comPortName.getSelectedObjects();
    if (values != null && values.length > 0 && values[0] instanceof String) {
      return (String)values[0];
    }
    return null;
  }
  
  public void setSerialPortName(String val) {
    comPortName.setSelectedItem(val);
  }

  public int getSerialDataRate() {
    Object[] values = comDataRate.getSelectedObjects();
    if (values != null && values.length > 0 && values[0] instanceof String) {
      return Integer.parseInt((String)comDataRate.getSelectedItem());
    }
    return -1;
  }

  public void setSerialDataRate(int val) {
    comDataRate.setSelectedItem(""+val);
  }

  public int getSerialDataBit() {
    return Integer.parseInt((String)comDataBit.getSelectedItem());
  }

  public void setSerialDataBit(int val) {
    comDataBit.setSelectedItem(""+val);
  }

  public SerialCommunicator.Parity getSerialParity() {
    return SerialCommunicator.Parity.valueOf((String)comParity.getSelectedItem());
  }

  public void setSerialParity(SerialCommunicator.Parity val) {
    comParity.setSelectedItem(val.name());
  }

  public int getSerialStopBit() {
    return Integer.parseInt((String)comStopBit.getSelectedItem());
  }

  public void setSerialStopBit(int val) {
    comStopBit.setSelectedItem(""+val);
  }

  public int getSerialTimeout() {
    return Integer.parseInt(comTimeout.getText());
  }

  public void setSerialTimeout(int val) {
    comTimeout.setText(""+val);
  }

  /**
   * Sets the time between commands.
   * @param time Time in milliseconds.
   */
  public void setTimeBetweenCommands(int time) {
    timeBetweenCommands.setText(Integer.toString(time));
  }

  /**
   * Sets the full pathname of the log file.
   * @param logFilePathname
   *        The full pathname of the log file.
   */
  public void setLogFilePathname(String logFilePathname) {
    this.logFile.setText(logFilePathname);
  }
}
